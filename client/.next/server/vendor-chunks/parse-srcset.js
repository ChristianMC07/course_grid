"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse-srcset";
exports.ids = ["vendor-chunks/parse-srcset"];
exports.modules = {

/***/ "(action-browser)/./node_modules/parse-srcset/src/parse-srcset.js":
/*!*******************************************************!*\
  !*** ./node_modules/parse-srcset/src/parse-srcset.js ***!
  \*******************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * Srcset Parser\n *\n * By Alex Bell |  MIT License\n *\n * JS Parser for the string value that appears in markup <img srcset=\"here\">\n *\n * @returns Array [{url: _, d: _, w: _, h:_}, ...]\n *\n * Based super duper closely on the reference algorithm at:\n * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute\n *\n * Most comments are copied in directly from the spec\n * (except for comments in parens).\n */ (function(root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(void 0, function() {\n    // 1. Let input be the value passed to this algorithm.\n    return function(input) {\n        // UTILITY FUNCTIONS\n        // Manual is faster than RegEx\n        // http://bjorn.tipling.com/state-and-regular-expressions-in-javascript\n        // http://jsperf.com/whitespace-character/5\n        function isSpace(c) {\n            return c === \" \" || // space\n            c === \"\t\" || // horizontal tab\n            c === \"\\n\" || // new line\n            c === \"\\f\" || // form feed\n            c === \"\\r\"; // carriage return\n        }\n        function collectCharacters(regEx) {\n            var chars, match = regEx.exec(input.substring(pos));\n            if (match) {\n                chars = match[0];\n                pos += chars.length;\n                return chars;\n            }\n        }\n        var inputLength = input.length, // (Don't use \\s, to avoid matching non-breaking space)\n        regexLeadingSpaces = /^[ \\t\\n\\r\\u000c]+/, regexLeadingCommasOrSpaces = /^[, \\t\\n\\r\\u000c]+/, regexLeadingNotSpaces = /^[^ \\t\\n\\r\\u000c]+/, regexTrailingCommas = /[,]+$/, regexNonNegativeInteger = /^\\d+$/, // ( Positive or negative or unsigned integers or decimals, without or without exponents.\n        // Must include at least one digit.\n        // According to spec tests any decimal point must be followed by a digit.\n        // No leading plus sign is allowed.)\n        // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number\n        regexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/, url, descriptors, currentDescriptor, state, c, // 2. Let position be a pointer into input, initially pointing at the start\n        //    of the string.\n        pos = 0, // 3. Let candidates be an initially empty source set.\n        candidates = [];\n        // 4. Splitting loop: Collect a sequence of characters that are space\n        //    characters or U+002C COMMA characters. If any U+002C COMMA characters\n        //    were collected, that is a parse error.\n        while(true){\n            collectCharacters(regexLeadingCommasOrSpaces);\n            // 5. If position is past the end of input, return candidates and abort these steps.\n            if (pos >= inputLength) {\n                return candidates; // (we're done, this is the sole return path)\n            }\n            // 6. Collect a sequence of characters that are not space characters,\n            //    and let that be url.\n            url = collectCharacters(regexLeadingNotSpaces);\n            // 7. Let descriptors be a new empty list.\n            descriptors = [];\n            // 8. If url ends with a U+002C COMMA character (,), follow these substeps:\n            //\t\t(1). Remove all trailing U+002C COMMA characters from url. If this removed\n            //         more than one character, that is a parse error.\n            if (url.slice(-1) === \",\") {\n                url = url.replace(regexTrailingCommas, \"\");\n                // (Jump ahead to step 9 to skip tokenization and just push the candidate).\n                parseDescriptors();\n            //\tOtherwise, follow these substeps:\n            } else {\n                tokenize();\n            } // (close else of step 8)\n        // 16. Return to the step labeled splitting loop.\n        } // (Close of big while loop.)\n        /**\n\t\t * Tokenizes descriptor properties prior to parsing\n\t\t * Returns undefined.\n\t\t */ function tokenize() {\n            // 8.1. Descriptor tokeniser: Skip whitespace\n            collectCharacters(regexLeadingSpaces);\n            // 8.2. Let current descriptor be the empty string.\n            currentDescriptor = \"\";\n            // 8.3. Let state be in descriptor.\n            state = \"in descriptor\";\n            while(true){\n                // 8.4. Let c be the character at position.\n                c = input.charAt(pos);\n                //  Do the following depending on the value of state.\n                //  For the purpose of this step, \"EOF\" is a special character representing\n                //  that position is past the end of input.\n                // In descriptor\n                if (state === \"in descriptor\") {\n                    // Do the following, depending on the value of c:\n                    // Space character\n                    // If current descriptor is not empty, append current descriptor to\n                    // descriptors and let current descriptor be the empty string.\n                    // Set state to after descriptor.\n                    if (isSpace(c)) {\n                        if (currentDescriptor) {\n                            descriptors.push(currentDescriptor);\n                            currentDescriptor = \"\";\n                            state = \"after descriptor\";\n                        }\n                    // U+002C COMMA (,)\n                    // Advance position to the next character in input. If current descriptor\n                    // is not empty, append current descriptor to descriptors. Jump to the step\n                    // labeled descriptor parser.\n                    } else if (c === \",\") {\n                        pos += 1;\n                        if (currentDescriptor) {\n                            descriptors.push(currentDescriptor);\n                        }\n                        parseDescriptors();\n                        return;\n                    // U+0028 LEFT PARENTHESIS (()\n                    // Append c to current descriptor. Set state to in parens.\n                    } else if (c === \"(\") {\n                        currentDescriptor = currentDescriptor + c;\n                        state = \"in parens\";\n                    // EOF\n                    // If current descriptor is not empty, append current descriptor to\n                    // descriptors. Jump to the step labeled descriptor parser.\n                    } else if (c === \"\") {\n                        if (currentDescriptor) {\n                            descriptors.push(currentDescriptor);\n                        }\n                        parseDescriptors();\n                        return;\n                    // Anything else\n                    // Append c to current descriptor.\n                    } else {\n                        currentDescriptor = currentDescriptor + c;\n                    }\n                // (end \"in descriptor\"\n                // In parens\n                } else if (state === \"in parens\") {\n                    // U+0029 RIGHT PARENTHESIS ())\n                    // Append c to current descriptor. Set state to in descriptor.\n                    if (c === \")\") {\n                        currentDescriptor = currentDescriptor + c;\n                        state = \"in descriptor\";\n                    // EOF\n                    // Append current descriptor to descriptors. Jump to the step labeled\n                    // descriptor parser.\n                    } else if (c === \"\") {\n                        descriptors.push(currentDescriptor);\n                        parseDescriptors();\n                        return;\n                    // Anything else\n                    // Append c to current descriptor.\n                    } else {\n                        currentDescriptor = currentDescriptor + c;\n                    }\n                // After descriptor\n                } else if (state === \"after descriptor\") {\n                    // Do the following, depending on the value of c:\n                    // Space character: Stay in this state.\n                    if (isSpace(c)) {\n                    // EOF: Jump to the step labeled descriptor parser.\n                    } else if (c === \"\") {\n                        parseDescriptors();\n                        return;\n                    // Anything else\n                    // Set state to in descriptor. Set position to the previous character in input.\n                    } else {\n                        state = \"in descriptor\";\n                        pos -= 1;\n                    }\n                }\n                // Advance position to the next character in input.\n                pos += 1;\n            // Repeat this step.\n            } // (close while true loop)\n        }\n        /**\n\t\t * Adds descriptor properties to a candidate, pushes to the candidates array\n\t\t * @return undefined\n\t\t */ // Declared outside of the while loop so that it's only created once.\n        function parseDescriptors() {\n            // 9. Descriptor parser: Let error be no.\n            var pError = false, // 10. Let width be absent.\n            // 11. Let density be absent.\n            // 12. Let future-compat-h be absent. (We're implementing it now as h)\n            w, d, h, i, candidate = {}, desc, lastChar, value, intVal, floatVal;\n            // 13. For each descriptor in descriptors, run the appropriate set of steps\n            // from the following list:\n            for(i = 0; i < descriptors.length; i++){\n                desc = descriptors[i];\n                lastChar = desc[desc.length - 1];\n                value = desc.substring(0, desc.length - 1);\n                intVal = parseInt(value, 10);\n                floatVal = parseFloat(value);\n                // If the descriptor consists of a valid non-negative integer followed by\n                // a U+0077 LATIN SMALL LETTER W character\n                if (regexNonNegativeInteger.test(value) && lastChar === \"w\") {\n                    // If width and density are not both absent, then let error be yes.\n                    if (w || d) {\n                        pError = true;\n                    }\n                    // Apply the rules for parsing non-negative integers to the descriptor.\n                    // If the result is zero, let error be yes.\n                    // Otherwise, let width be the result.\n                    if (intVal === 0) {\n                        pError = true;\n                    } else {\n                        w = intVal;\n                    }\n                // If the descriptor consists of a valid floating-point number followed by\n                // a U+0078 LATIN SMALL LETTER X character\n                } else if (regexFloatingPoint.test(value) && lastChar === \"x\") {\n                    // If width, density and future-compat-h are not all absent, then let error\n                    // be yes.\n                    if (w || d || h) {\n                        pError = true;\n                    }\n                    // Apply the rules for parsing floating-point number values to the descriptor.\n                    // If the result is less than zero, let error be yes. Otherwise, let density\n                    // be the result.\n                    if (floatVal < 0) {\n                        pError = true;\n                    } else {\n                        d = floatVal;\n                    }\n                // If the descriptor consists of a valid non-negative integer followed by\n                // a U+0068 LATIN SMALL LETTER H character\n                } else if (regexNonNegativeInteger.test(value) && lastChar === \"h\") {\n                    // If height and density are not both absent, then let error be yes.\n                    if (h || d) {\n                        pError = true;\n                    }\n                    // Apply the rules for parsing non-negative integers to the descriptor.\n                    // If the result is zero, let error be yes. Otherwise, let future-compat-h\n                    // be the result.\n                    if (intVal === 0) {\n                        pError = true;\n                    } else {\n                        h = intVal;\n                    }\n                // Anything else, Let error be yes.\n                } else {\n                    pError = true;\n                }\n            } // (close step 13 for loop)\n            // 15. If error is still no, then append a new image source to candidates whose\n            // URL is url, associated with a width width if not absent and a pixel\n            // density density if not absent. Otherwise, there is a parse error.\n            if (!pError) {\n                candidate.url = url;\n                if (w) {\n                    candidate.w = w;\n                }\n                if (d) {\n                    candidate.d = d;\n                }\n                if (h) {\n                    candidate.h = h;\n                }\n                candidates.push(candidate);\n            } else if (console && console.log) {\n                console.log(\"Invalid srcset descriptor found in '\" + input + \"' at '\" + desc + \"'.\");\n            }\n        } // (close parseDescriptors fn)\n    };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/parse-srcset/src/parse-srcset.js\n");

/***/ })

};
;